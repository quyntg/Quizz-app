let current = 0;
const pageSize = 40;
let currentPage = 0;
let generatedQuestions = [];
let totalQuestions = 0;
let totalPages = 0;
let timerDuration = 30 * 60; // 30 ph√∫t = 1800 gi√¢y
let timerInterval;
let isSubmitted = false;
let totalTimeSpent = 0; // gi√¢y
let timerStartAt = null;

function startExam() {
	window.location.href = 'exam.html';
	initNav(); // Hi·ªÉn th·ªã tr∆∞·ªõc nav
	showQuestion(0); // Hi·ªÉn th·ªã √¥ ƒë·∫ßu
	loadQuestions(); // L·∫•y d·ªØ li·ªáu
}

function generateExamFromQuestions(allQuestions, total, easyCount, mediumCount, hardCount) {
    const easy = allQuestions.filter(q => q.difficulty === 'easy');
    const medium = allQuestions.filter(q => q.difficulty === 'medium');
    const hard = allQuestions.filter(q => q.difficulty === 'hard');

    if (easy.length < easyCount || medium.length < mediumCount || hard.length < hardCount) {
        alert("‚ùå Kh√¥ng ƒë·ªß c√¢u h·ªèi theo t·ª´ng m·ª©c ƒë·ªô y√™u c·∫ßu.");
        return;
    } else {        
        window.location.href = 'load.html';
    }

    function pickRandom(arr, n) {
        const copy = [...arr];
        const result = [];
        while (result.length < n && copy.length > 0) {
            const idx = Math.floor(Math.random() * copy.length);
            result.push(copy.splice(idx, 1)[0]);
        }
        return result;
    }

    const selectedEasy = pickRandom(easy, easyCount);
    const selectedMedium = pickRandom(medium, mediumCount);
    const selectedHard = pickRandom(hard, hardCount);

    let exam = [...selectedEasy, ...selectedMedium, ...selectedHard];

    // üîÑ Tr·ªôn c√¢u h·ªèi
    exam = shuffleArray(exam);

    // üîÑ Tr·ªôn ƒë√°p √°n t·ª´ng c√¢u
    exam = exam.map((q) => {
        const options = shuffleArray(q.options); // Tr·ªôn m·∫£ng ƒë√°p √°n

        // X√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng m·ªõi d·ª±a v√†o id c≈© (correct l√† v·ªã tr√≠ 1-4 tr∆∞·ªõc khi tr·ªôn)
        let oldCorrectId = q.correct ? parseInt(q.correct) : null;
        let correctOption = oldCorrectId ? q.options[oldCorrectId - 1] : null;
        // T√¨m v·ªã tr√≠ m·ªõi c·ªßa ƒë√°p √°n ƒë√∫ng sau khi tr·ªôn
        let newCorrect = "";
        if (correctOption) {
            newCorrect = options.findIndex(opt => opt.context === correctOption.context) + 1;
        }
        return {
            ...q,
            options: options.map((opt, idx) => ({ ...opt, id: idx + 1 })),
            correct: newCorrect ? newCorrect.toString() : ""
        };
    });
    
    return exam.slice(0, total);
}

// Tr·ªôn m·∫£ng (Fisher‚ÄìYates)
function shuffleArray(arr) {
	const array = [...arr];
	for (let i = array.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[array[i], array[j]] = [array[j], array[i]];
	}
	return array;
}


function readFile(file) {
	const reader = new FileReader();

	reader.onload = function(e) {
		const data = new Uint8Array(e.target.result);
		const workbook = XLSX.read(data, { type: 'array' });

		const sheetName = workbook.SheetNames[0];
		const sheet = workbook.Sheets[sheetName];

		const raw = XLSX.utils.sheet_to_json(sheet);

		const questions = raw.map((row, index) => {
            // X·ª≠ l√Ω correctId (v·ªã tr√≠ ƒë√°p √°n ƒë√∫ng, 1-4)
            let correctId = row.correctId ? parseInt(row.correctId) : null;
            // N·∫øu kh√¥ng c√≥ correctId, fallback sang so s√°nh n·ªôi dung (gi·ªØ logic c≈© cho an to√†n)
            if (!correctId && row.correct) {
                if (row.A == row.correct) correctId = 1;
                else if (row.B == row.correct) correctId = 2;
                else if (row.C == row.correct) correctId = 3;
                else if (row.D == row.correct) correctId = 4;
            }
            // N·∫øu v·∫´n kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th√¨ ƒë·ªÉ null

            // X·ª≠ l√Ω difficulty
            let difficulty = "";
            if (row.difficulty === "d·ªÖ") {
                difficulty = "easy";
            } else if (row.difficulty === "trung b√¨nh" || row.difficulty === "Trung b√¨nh") {
                difficulty = "medium";
            } else if (row.difficulty === "kh√≥") {
                difficulty = "hard";
            }

            return {
                id: row.id || `Q${index + 1}`,
                question: row.question || "",
                media: row.media || "",
                options: [
                    { context: row.A || "", id: 1 },
                    { context: row.B || "", id: 2 },
                    { context: row.C || "", id: 3 },
                    { context: row.D || "", id: 4 }
                ],
                correct: correctId ? correctId.toString() : "", // L∆∞u v·ªã tr√≠ ƒë√°p √°n ƒë√∫ng (1-4) d·∫°ng chu·ªói
                description: row.description || "",
                difficulty,
                note: row.note || "",
            };
        });
		
		if (questions.length < localStorage.getItem('totalQuestions')) {
			alert(`‚ùå S·ªë l∆∞·ª£ng c√¢u h·ªèi c·ªßa ƒë·ªÅ (${localStorage.getItem('totalQuestions')}) v∆∞·ª£t qu√° gi·ªõi h·∫°n t·ªëi ƒëa (${questions.length})`);
			return;
		} else {
			localStorage.setItem('questions', JSON.stringify(questions));
			const allQuestions = JSON.parse(localStorage.getItem('questions')) || [];
			const total = parseInt(localStorage.getItem('totalQuestions')) || 40;
			const easy = parseInt(localStorage.getItem('easyCount')) || 0;
			const medium = parseInt(localStorage.getItem('mediumCount')) || 0;
			const hard = parseInt(localStorage.getItem('hardCount')) || 0;
			
			let generatedQuestions = generateExamFromQuestions(allQuestions, total, easy, medium, hard);
			localStorage.setItem('questions', JSON.stringify(generatedQuestions));
		}
	};

	reader.readAsArrayBuffer(file);
}

function startCountdown(seconds = timerDuration) {
	timerStartAt = Date.now(); // Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu
	let timeLeft = seconds;
	updateTimerDisplay(timeLeft);
	
	timerInterval = setInterval(() => {
		timeLeft--;
		updateTimerDisplay(timeLeft);

		if (timeLeft <= 0) {
			clearInterval(timerInterval);
			alert("‚è∞ H·∫øt th·ªùi gian l√†m b√†i!");
			submitExam(); // T·ª± ƒë·ªông n·ªôp b√†i
		}
	}, 1000);
}

function updateTimerDisplay(seconds) {
	const mins = Math.floor(seconds / 60);
	const secs = seconds % 60;
	document.getElementById("timerDisplay").innerText =
		`${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

// T·∫°o nav 40 √¥ c√¢u h·ªèi
function initNav() {
	const nav = document.getElementById('questionNav');
	nav.innerHTML = '';

	for (let i = 1; i <= totalQuestions; i++) {
		const li = document.createElement('li');
		li.textContent = i;
		li.addEventListener('click', () => showQuestion(i - 1));
		nav.appendChild(li);
	}
	renderPage();
	document.getElementById('totalLength').innerText = totalQuestions;
}

// ƒê√°nh d·∫•u √¥ ƒëang active
function highlightNav(idx) {
	document.querySelectorAll('#questionNav li').forEach((li, i) => {
		li.classList.toggle('active', i === idx);
	});
}

// Hi·ªÉn th·ªã ƒë√∫ng 10 √¥ c·ªßa trang hi·ªán t·∫°i
function renderPage() {
	const items = document.querySelectorAll('#questionNav li');
	items.forEach((li, i) => {
		const pageIndex = Math.floor(i / pageSize);
		li.style.display = (pageIndex === currentPage) ? 'flex' : 'none';
	});
	// c·∫≠p nh·∫≠t n√∫t ph√¢n trang
	document.getElementById('prevPage').disabled = currentPage === 0;
	document.getElementById('nextPage').disabled = currentPage >= totalPages - 1;
	document.getElementById('pageInfo').innerText = `${currentPage + 1} / ${totalPages}`;
}

// Hi·ªÉn th·ªã c√¢u h·ªèi t·∫°i v·ªã tr√≠ idx
function showQuestion(idx) {
	current = idx;
	const q = generatedQuestions[idx] || {
		question: 'Ch∆∞a c√≥ d·ªØ li·ªáu',
		options: [],
		correct: '-'
	};
	const options = Array.isArray(q.options) ? q.options : [];

	// Ti√™u ƒë·ªÅ c√¢u h·ªèi: "C√¢u h·ªèi x: ..."
	const questionTitle = document.getElementById('viewQuestion');
	questionTitle.innerHTML = `C√¢u h·ªèi ${idx + 1}:<span class="question-title"> ${q.question}</span>`;

	// Hi·ªÉn th·ªã s·ªë th·ª© t·ª±
	document.getElementById('currentIndex').innerText = idx + 1;

	// Hi·ªÉn th·ªã danh s√°ch ƒë√°p √°n
	const opts = document.getElementById('viewOptions');
	opts.innerHTML = '';

	['A', 'B', 'C', 'D'].forEach((label, i) => {
		const option = options[i] || { context: '', id: null };
		const li = document.createElement('li');
		li.innerHTML = `<span>${label}. ${option.context}</span>`;
		li.dataset.id = option.id;

		// N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn tr∆∞·ªõc th√¨ ƒë√°nh d·∫•u l·∫°i
		if (q.userAnswer === option.context) {
			li.classList.add('selected');
		}
		
		// N·∫øu ƒë√£ n·ªôp b√†i ‚Üí x·ª≠ l√Ω ch·∫•m ƒëi·ªÉm m√†u
		if (isSubmitted) {
			// N·∫øu l√† ƒë√°p √°n ƒë√∫ng ‚Üí t√¥ xanh
			if ((i + 1).toString() === q.correct) {
				li.classList.add('correct-answer');
			}
			// N·∫øu ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n n√†y v√† n√≥ sai ‚Üí t√¥ ƒë·ªè
			if (
				q.userAnswer === option.context &&
				(i + 1).toString() !== q.correct
			) {
				li.classList.add('wrong-answer');
			}
			// Kho√° kh√¥ng cho ch·ªçn l·∫°i
			li.style.pointerEvents = 'none';
			li.style.opacity = '0.6';
		} else {
			// N·∫øu ch∆∞a n·ªôp th√¨ cho ch·ªçn
			li.addEventListener('click', () => {
				opts.querySelectorAll('li').forEach(el => el.classList.remove('selected'));
				li.classList.add('selected');
				generatedQuestions[idx].userAnswer = option.context;
				updateAnsweredNav();
			});
		}

		opts.appendChild(li);
	});

	if (isSubmitted && q.description) {
		const desc = document.createElement('div');
		desc.className = 'explanation';
		desc.innerHTML = `<strong>Gi·∫£i th√≠ch:</strong> ${q.description}`;
		document.getElementById('viewOptions').appendChild(desc);
	}

	// document.getElementById('viewCorrect').innerText = q.correct;
	highlightNav(idx);
	updateAnsweredNav(); // ‚Üê c·∫≠p nh·∫≠t tr·∫°ng th√°i nav
}


// T·∫£i c√¢u h·ªèi t·ª´ server v√† c·∫≠p nh·∫≠t giao di·ªán
function loadQuestions() {
	// Ki·ªÉm tra tr·∫°ng th√°i ƒë√£ n·ªôp b√†i
	isSubmitted = JSON.parse(localStorage.getItem('isSubmitted')) || false;
	generatedQuestions = JSON.parse(localStorage.getItem('questions')) || [];
	totalTimeSpent = parseInt(localStorage.getItem('totalTimeSpent')) || 0;

	// N·∫øu ƒë√£ n·ªôp b√†i, hi·ªÉn th·ªã l·∫°i b√†i thi c≈©
	if (isSubmitted) {
		totalQuestions = generatedQuestions.length;
		totalPages = Math.ceil(totalQuestions / pageSize);

		// Hi·ªÉn th·ªã th·ªùi gian ƒë√£ l√†m b√†i
		const mins = Math.floor(totalTimeSpent / 60);
		const secs = totalTimeSpent % 60;
		document.getElementById("timerDisplay").innerText =
			`${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;

		// Kh·ªüi t·∫°o giao di·ªán
		initNav();
		showQuestion(0);

		// Kho√° kh√¥ng cho ch·ªçn l·∫°i ƒë√°p √°n
		document.querySelectorAll('#viewOptions li').forEach(li => {
			li.style.pointerEvents = 'none';
			li.style.opacity = '0.6';
		});

		// ·∫®n n√∫t n·ªôp b√†i
		const btn = document.querySelector('button[onclick="confirmSubmit()"]');
		if (btn) btn.disabled = true;
	} else {
		// N·∫øu ch∆∞a n·ªôp b√†i, b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
		startCountdown();
	}

	// Chuy·ªÉn trang
	document.getElementById('prevPage').addEventListener('click', () => {
		if (currentPage > 0) {
			currentPage--;
			renderPage();
		}
	});
	document.getElementById('nextPage').addEventListener('click', () => {
		const maxPage = Math.floor((totalQuestions - 1) / pageSize);
		if (currentPage < maxPage) {
			currentPage++;
			renderPage();
		}
	});
}

function updateAnsweredNav() {
	const navItems = document.querySelectorAll('#questionNav li');
	generatedQuestions.forEach((q, i) => {
		const li = navItems[i];
		if (li) {
			if (q.userAnswer) {
				li.classList.remove('unanswered'); // X√≥a l·ªõp 'unanswered' n·∫øu ƒë√£ tr·∫£ l·ªùi
				li.classList.add('answered'); // Th√™m l·ªõp 'answered' cho c√¢u ƒë√£ tr·∫£ l·ªùi
			} else {
				li.classList.remove('answered'); // X√≥a l·ªõp 'answered' n·∫øu ch∆∞a tr·∫£ l·ªùi
				if (isSubmitted) {
					li.classList.add('unanswered'); // Th√™m l·ªõp 'unanswered' n·∫øu ch∆∞a tr·∫£ l·ªùi v√† ch∆∞a n·ªôp b√†i
				}
			}
		}
	});
}

function confirmSubmit() {
	const confirmed = confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng?");
	if (confirmed) {
		submitExam(); // N·∫øu ƒë·ªìng √Ω th√¨ m·ªõi n·ªôp b√†i
	}
}

function submitExam() {
	if (isSubmitted) return; // Kh√¥ng n·ªôp l·∫°i

	isSubmitted = true;
	localStorage.setItem('isSubmitted', isSubmitted); // L∆∞u tr·∫°ng th√°i ƒë√£ n·ªôp
	clearInterval(timerInterval); // D·ª´ng ƒë·∫øm gi·ªù

	// T√≠nh th·ªùi gian l√†m b√†i
	const now = Date.now();
	totalTimeSpent = Math.floor((now - timerStartAt) / 1000); // gi√¢y
	const mins = Math.floor(totalTimeSpent / 60);
	const secs = totalTimeSpent % 60;
	const timeText = `${mins} ph√∫t ${secs} gi√¢y`;

	let correctCount = 0;
	let wrongCount = 0;
	let unansweredCount = 0;

	generatedQuestions.forEach((q, idx) => {
		const navItem = document.querySelectorAll('#questionNav li')[idx];
		// L·∫•y context ƒë√°p √°n ƒë√∫ng theo v·ªã tr√≠ correct
		const correctIndex = parseInt(q.correct) - 1;
		const correctContext = (q.options && q.options[correctIndex]) ? q.options[correctIndex].context : '';

		if (!q.userAnswer) {
			// Ch∆∞a l√†m
			unansweredCount++;
			navItem.classList.remove('correct', 'wrong');
			navItem.classList.add('unanswered');
		} else if (String(q.userAnswer).trim().toLowerCase() === String(correctContext).trim().toLowerCase()) {
			// ƒê√∫ng
			correctCount++;
			navItem.classList.remove('wrong', 'unanswered');
			navItem.classList.add('correct');
		} else {
			// Sai
			wrongCount++;
			navItem.classList.remove('correct', 'unanswered');
			navItem.classList.add('wrong');
		}
	});

	// Kho√° kh√¥ng cho ch·ªçn n·ªØa
	document.querySelectorAll('#viewOptions li').forEach(li => {
		li.style.pointerEvents = 'none';
		li.style.opacity = '0.6';
	});

	// ·∫®n n√∫t n·ªôp b√†i (n·∫øu c√≥)
	const btn = document.querySelector('button[onclick="confirmSubmit()"]');
	if (btn) btn.disabled = true;
	
	// Hi·ªÉn th·ªã k·∫øt qu·∫£ b·∫±ng modal
	const resultText = `
		‚úÖ ƒê√∫ng: ${correctCount}<br>
		‚ùå Sai: ${wrongCount}<br>
		‚ö†Ô∏è Ch∆∞a l√†m: ${unansweredCount}<br>
		‚è±Ô∏è Th·ªùi gian l√†m b√†i: ${timeText}
	`;
	
	showQuestion(current);
	document.getElementById('resultBody').innerHTML = resultText;
	document.getElementById('resultModal').style.display = 'block';
	localStorage.setItem('questions', JSON.stringify(generatedQuestions));
}

function closeResultModal() {
	document.getElementById('resultModal').style.display = 'none';
}

function newExam() {
	localStorage.clear();
	window.location.href = 'create.html';
}

function generatedOptions(question) {
	let newQuestion = [];
	for (let i = 0; i < question.length; i++) {
		const q = question[i];
		const options = ['A', 'B', 'C', 'D'].map((opt, idx) => ({
			context: q[opt] || '',
			id: idx + 1 // ƒê·∫£m b·∫£o ID t·ª´ 1 ƒë·∫øn 4
		}));
		q['options'] = options;

		// X·ª≠ l√Ω difficulty
		let difficulty = "";
		if (q.difficulty === "d·ªÖ") {
			difficulty = "easy";
		} else if (q.difficulty === "trung b√¨nh") {
			difficulty = "medium";
		} else if (q.difficulty === "kh√≥") {
			difficulty = "hard";
		}
		q['difficulty'] = difficulty;
		newQuestion.push(q);
	}

	return newQuestion;
}